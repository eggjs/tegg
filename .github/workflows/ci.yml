name: CI

on:
  push:
    paths-ignore:
      - '**/*.md'
    branches: [next]
  pull_request:
    types: [opened, synchronize]
    paths-ignore:
      - '**/*.md'
    branches: [next]
  merge_group:

permissions:
  id-token: write
  actions: write

jobs:
  typecheck:
    runs-on: ubuntu-latest

    concurrency:
      group: typecheck-${{ github.workflow }}-#${{ github.event.pull_request.number || github.head_ref || github.ref }}
      cancel-in-progress: true
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Install pnpm
        uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda # v4

      - name: Set up Node.js
        uses: actions/setup-node@a0853c24544627f65ddf259abe73b1d18a591444 # v5
        with:
          node-version: '22'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run lint
        run: pnpm run lint

      - name: Check dedupe
        run: pnpm dedupe --check

      - name: Run typecheck
        run: pnpm run typecheck

      - name: Run build
        run: pnpm run build

  test:
    strategy:
      fail-fast: false
      matrix:
        os: ['ubuntu-latest', 'macos-latest', 'windows-latest']
        node: ['20', '22', '24']

    name: test node@${{ matrix.node }} on ${{ matrix.os }}

    runs-on: ${{ matrix.os }}

    concurrency:
      group: test-${{ github.workflow }}-#${{ github.event.pull_request.number || github.head_ref || github.ref }}-${{ matrix.os }}-${{ matrix.node }}
      cancel-in-progress: true

    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      # install and start MySQL (will automatically start mysqld)
      - name: Start MySQL (macOS or Linux)
        if: ${{ matrix.os == 'macos-latest' || matrix.os == 'ubuntu-latest' }}
        uses: shogo82148/actions-setup-mysql@b9917bb49fa1c316abfb6931011d54da7f5470d9 # v1
        with:
          mysql-version: '8'
          auto-start: 'true'
      - name: Init DB (macOS or Linux)
        if: ${{ matrix.os == 'macos-latest' || matrix.os == 'ubuntu-latest' }}
        run: |
          mysql -uroot -e "CREATE DATABASE IF NOT EXISTS test;"

      # Windows: use MariaDB (service name MariaDB), if you must use MySQL, see the "replace MySQL" comment below
      - name: Start MariaDB (Windows)
        if: ${{ matrix.os == 'windows-latest' }}
        shell: pwsh
        run: |
          choco install -y mariadb
          refreshenv
          # start service and wait for Running
          # $svc = Get-Service -Name MariaDB -ErrorAction SilentlyContinue
          # if (-not $svc) { Write-Error "MariaDB service not found after install"; exit 1 }
          # if ($svc.Status -ne 'Running') {
          #   Start-Service -Name MariaDB -ErrorAction Stop
          #   $svc.WaitForStatus('Running','00:00:30')
          # }
          # wait for 3306 port to be ready (max 60s)
          $deadline = (Get-Date).AddSeconds(60)
          $ready = $false
          while ((Get-Date) -lt $deadline -and -not $ready) {
            try {
              $c = New-Object System.Net.Sockets.TcpClient
              $ok = $c.BeginConnect('127.0.0.1',3306,$null,$null).AsyncWaitHandle.WaitOne(2000)
              if ($ok -and $c.Connected) { $ready = $true }
              $c.Close()
            } catch {}
          }
          if (-not $ready) { Write-Error "MariaDB not ready on 127.0.0.1:3306"; exit 1 }
          # MariaDB default root has no password, set a password and create database/user
          # & "C:\Program Files\MariaDB 12.0\bin\mysqladmin.exe" -u root password root
          & "C:\Program Files\MariaDB 12.0\bin\mysql.exe" -uroot -e "CREATE DATABASE IF NOT EXISTS test;"

      - name: Install pnpm
        uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda # v4

      - name: Set up Node.js
        uses: actions/setup-node@a0853c24544627f65ddf259abe73b1d18a591444 # v5
        with:
          node-version: ${{ matrix.node }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run tests
        run: pnpm run ci

      - name: Code Coverage
        uses: codecov/codecov-action@5a1091511ad55cbe89839c7260b706298ca349f7 # v5
        with:
          use_oidc: true
